paths: 
  /auth/login:
    post:
      summary: Login To System
      tags: 
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          summary: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '401':
          description: Unauthorize

  /auth/register:
    post:
      summary: Register To System
      tags: 
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email: 
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          summary: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '409':
          description: Conflict

  /auth/refresh-token:
    post:
      summary: Refresh token when access token expire
      tags: 
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '201':
          summary: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '404':
          description: Not Found


  /user/me:
    get:
      summary: Get user profile
      tags: 
        - user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '404':
          description: Not Found
        
  /user/reset-password:
    patch:
      summary: Reset Password
      tags: 
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                  format: email
                password:
                  type: string
                codeToVerify:
                  type: number
      responses:
        '200':
          summary: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Interval

  /user/send-code:
    patch: 
      summary: Send Verify Code To Your Email
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                  format: email
      responses:
        '200':
          summary: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Interval
components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
        avatar:
          type: string
        password:
          type: string
        coin:
          type: number
          minimum: 0
          maximum: 999999
        numberOfStars:
          type: number
          minimum: 0
          maximum: 999
        flashcards:
          type: array
          items:
            $ref: '#/components/schemas/Flashcard'
        verifyCode:
          type: object
          properties:
            code:
              type: number
            updatedAt:
              type: Date
    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: Date
        type:
          type: string,
          enum: [refresh]
        user:
          type: ObjectId
          $ref: '#/components/schemas/User'
    Flashcard:
      type: object
      properties:
        name:
          type: string
        picture:
          type: string
        words:
          type: array
          items:
            $ref: '#/components/schemas/Word'
        sentences:
          type: array
          items:
            $ref: '#/components/schemas/Sentence'
        stars:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Sentence:
      type: object
      properties:
        content:
          type: string
        mean:
          type: string
        stars:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Word:
      type: object
      properties:
        content:
          type: string
        type:
          type: string
          enum: ['n', 'adj', 'adv', 'v', 'con', 'pre', 'pro', 'det']
        mean:
          type: string
        example:
          type: string
        synonyms:
          type: array
          items:
            $ref: '#/components/schemas/Word'
        antonyms:
          type: array
          items:
            $ref: '#/components/schemas/Word'
        picture:
          type: string
        phonetic:
          type: string
        star:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Topic:
      type: object
      properties:
        title:
          type: string
        words:
          type: array
          items:
            $ref: '#/components/schemas/Word'
        sentences:
          type: array
          items:
            $ref: '#/components/schemas/Sentence'
        icon:
          type: string
    Error:
      type: object
      properties:
        success:
          type: boolean
        statusCode:
          type: number
        message:
          type: string
        stack:
          type: string
    Data: 
      type: object
      properties:
        success:
          type: boolean
        statusCode:
          type: number
        data: 
            type: object
        message:
          type: string
        pagination:
          tye: string
  # responses:
  #   DuplicateEmail:
  #     description: Email already taken
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Error'
  #         example:
  #           code: 400
  #           message: Email already taken
  #   Unauthorized:
  #     description: Unauthorized
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Error'
  #         example:
  #           code: 401
  #           message: Please authenticate
  #   Forbidden:
  #     description: Forbidden
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Error'
  #         example:
  #           code: 403
  #           message: Forbidden
  #   NotFound:
  #     description: Not found
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Error'
  #         example:
  #           code: 404
  #           message: Not found